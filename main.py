import logging
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admin
import keyboard as kb
from onesec_api import Mailbox
import json
import asyncio
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

class CellarImport(StatesGroup):
	rasst = State()

@dp.message_handler(content_types=['text'], text='‚úâÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç—É')
async def takeamail(m: types.Message):
	ma = Mailbox('')
	email = f'{ma._mailbox_}@1secmail.com'
	await m.answer(f'üì´ –í–æ—Ç —Ç–≤–æ—è –ø–æ—á—Ç–∞: {email}\n–û—Ç–ø—Ä–∞–≤–ª—è–π –ø–∏—Å—å–º–æ.\n–ü–æ—á—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ, –º—ã –≤–∞—Å –æ–± —ç—Ç–æ–º –æ–ø–æ–≤–µ—Å—Ç–∏–º!\n\n<b>–ù–∞ 1 –ø–æ—á—Ç—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ - 1 –ø–∏—Å—å–º–æ.</b>\n<b>–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã - 10 –º–∏–Ω—É—Ç!</b>', parse_mode='HTML')
	while True:
		mb = ma.filtred_mail()
		if isinstance(mb, list):
			mf = ma.mailjobs('read',mb[0])
			js = mf.json()
			fromm = js['from']
			theme = js['subject']
			mes = js['textBody']
			await m.answer(f'üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n<b>–û—Ç</b>: {fromm}\n<b>–¢–µ–º–∞</b>: {theme}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>: {mes}', reply_markup=kb.menu, parse_mode='HTML')
			break
		else:
			pass
		await asyncio.sleep(5)

@dp.message_handler(content_types=['text'], text='üîê –°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å')
async def randompass(m: types.Message):
	ma = Mailbox('')
	passw = ma.rand_pass_for()
	await m.answer(f'üîë –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è –ø–∞—Ä–æ–ª—å, –¥–µ—Ä–∂–∏: `{passw}`\n\n*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–∏–∫–æ–º—É –Ω–µ –≤–∏–¥–µ–Ω, –º–æ–∂–µ—à—å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è*', parse_mode='MarkdownV2')

@dp.message_handler(commands=['admin'])
async def adminstration(m: types.Message):
	if m.chat.id == admin:
		await m.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)
	else:
		await m.answer('–ß–µ—Ä—Ç! –¢—ã –º–µ–Ω—è –≤–∑–ª–æ–º–∞–ª :(')

@dp.message_handler(content_types=['text'])
async def texthandler(m: types.Message):
	q.execute(f"SELECT * FROM users WHERE user_id = {m.chat.id}")
	result = q.fetchall()
	if len(result) == 0:
		uid = 'user_id'
		sql = 'INSERT INTO users ({}) VALUES ({})'.format(uid, m.chat.id)
		q.execute(sql)
		connection.commit()
	await m.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {m.from_user.mention}\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá', reply_markup=kb.menu)
 
@dp.callback_query_handler(lambda call: call.data.startswith('stats'))    
async def statistics(call):
	re = q.execute(f'SELECT * FROM users').fetchall()
	kol = len(re)
	connection.commit()
	await call.message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {kol}')

@dp.callback_query_handler(lambda call: call.data.startswith('rass'))    
async def usender(call):
	await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', reply_markup=kb.back)
	await CellarImport.rasst.set()

@dp.message_handler(state=CellarImport.rasst)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.menu)
		await state.finish()
	else:
		info = row
		await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(message.text))
			except:
				pass
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=kb.menu)
		await state.finish()

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True) # –ó–∞–ø—É—Å–∫